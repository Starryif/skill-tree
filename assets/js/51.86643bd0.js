(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{184:function(v,e,_){"use strict";_.r(e);var r=_(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var v=this,e=v.$createElement,_=v._self._c||e;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"自适应图片（响应式图片）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#自适应图片（响应式图片）","aria-hidden":"true"}},[v._v("#")]),v._v(" 自适应图片（响应式图片）")]),v._v(" "),_("p",[v._v("关于响应式图片——一种可以在不同的屏幕尺寸和分辨率的设备上都能良好工作以及其他特性的图片，并且看看HTML提供了什么工具来帮助实现它们。响应式图片仅仅只是响应式web设计的一部分（奠定了响应式web设计的良好基础）")]),v._v(" "),_("h2",{attrs:{id:"为什么要用自适应的图片？-为什么要用自适应的图片？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用自适应的图片？-为什么要用自适应的图片？","aria-hidden":"true"}},[v._v("#")]),v._v(" 为什么要用自适应的图片？ {#为什么要用自适应的图片？}")]),v._v(" "),_("p",[v._v("让我们来看一个典型的场景。一个典型的网站可能会有一张页首图片，这让访问者看起来感到愉快。图片下面可能会添加一些内容图像。页首图像的跨度可能是整个页首的宽度。而内容图像会适应内容纵列的某处。")]),v._v(" "),_("p",[v._v("这个网页在宽屏设备上表现良好，例如笔记本电脑或台式机。")]),v._v(" "),_("p",[v._v("正文内容被设置的最大宽度为1200像素——在高于该宽度的视口中，正文保持在1200像素，并将其本身置于可用空间的中间。在该宽度以下的视口中，正文将保持在视口宽度的100%。")]),v._v(" "),_("p",[v._v("页眉图像被设置为使其中心始终位于页眉的中心，无论页眉的宽度是多少。所以如果网站被显示在窄屏上，图片中心的重要细节（里面的人）仍然可以看到，而两边超出的部分都消失了。它的高度是200px。")]),v._v(" "),_("p",[v._v("内容图片已经被设置为如果body元素比图像更小，图像就开始缩小，这样图像总是在正文里，而不是溢出正文。")]),v._v(" "),_("p",[v._v("然而当你尝试在一个狭小的屏幕设备上查看本页面时，问题就会产生。网页的页眉看起来还可以，但是页眉这张图片占据了屏幕的一大部分的高度，在这个尺寸下，你在第一张图片的内容里很难看到人。")]),v._v(" "),_("p",[v._v("一个改进的方法是，当网站在狭窄的屏幕上观看时，显示一幅图片的包含了重要细节的裁剪版本，第二个被裁剪的图片会在像平板电脑这样的中等宽度的屏幕设备上显示，这就是众所周知的"),_("strong",[v._v("艺术方向问题（art direction problem）")]),v._v("。")]),v._v(" "),_("p",[v._v("另外，如果是在小屏手机屏幕上显示网页，那么没有必要在网页上嵌入这样大的图片。这被称之为"),_("strong",[v._v("分辨率切换问题（resolution switching problem）")]),v._v("。位图由以像素为单位的宽和高表示，正如我们看待矢量图一样（这句话不确定，请知道的开发者重新翻译）。如果位图显示的尺寸大于原始尺寸，一张较小的位图看来会有颗粒感（然而矢量图不会这样）。")]),v._v(" "),_("p",[v._v("相反，没有必要在比图片实际尺寸小的屏幕上显示一张大图，这样做会浪费带宽——当可以在设备上使用小图像时，手机用户尤其不愿意因为下载用于桌面的大图像而浪费带宽。理想的情况是当访问网站时依靠不同的设备来提供不同的分辨率图片和不同尺寸的图片。")]),v._v(" "),_("p",[v._v("让事情变得复杂的是，有些设备有很高的分辨率，为了显示的更出色，可能需要超出你预料的更大的图像。这从本质上是一样的问题，但在环境上有一些不同。")]),v._v(" "),_("p",[v._v("你可能会认为矢量图形能解决这些问题，在某种程度上是这样的——它们无论是文件大小还是比例都合适，无论在哪里你都应该尽可能的使用它们。然而，它们并不适合所有的图片类型，虽然在简单图形、图案、界面元素等方面较好，但如果是有大量的细节的照片，创建矢量图像会变得非常复杂。像JPEG格式这样的位图会更适合上面例子中的图像。")]),v._v(" "),_("p",[v._v("当web第一次出现时，这样的问题并不存在，在上世纪90年代中期，仅仅可以通过笔记本电脑和台式机来浏览web页面，所以浏览器开发者和规范制定者甚至没有想到要实现这种解决方式（响应式开发）。最近应用的响应式图像技术，通过让浏览器提供多个图像文件来解决上述问题，比如使用相同显示效果的图片但包含多个不同的分辨率（分辨率切换），或者使用不同的图片以适应不同的空间分配（艺术方向）。")]),v._v(" "),_("p",[v._v("在这篇文章中讨论的新特性 — srcset/sizes/<picture> — 都已经被新版本的现代浏览器和移动浏览器所支持（包括Edge，而不是IE）")]),v._v(" "),_("h2",{attrs:{id:"怎样创建自适应的图片"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#怎样创建自适应的图片","aria-hidden":"true"}},[v._v("#")]),v._v(" 怎样创建自适应的图片?")]),v._v(" "),_("p",[v._v("怎样用HTML的响应式图片来解决这些问题。需要注意的是，如以上示例所示，在本节中我们将专注于HTML的 <img>，但网站页眉的图片仅是装饰性的，实际上应该要用CSS的背景图片来实现。CSS是比HTML更好的响应式设计的工具，我们会在未来的CSS模块中讨论。")]),v._v(" "),_("h3",{attrs:{id:"分辨率切换：不同的尺寸-分辨率切换：不同的尺寸"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分辨率切换：不同的尺寸-分辨率切换：不同的尺寸","aria-hidden":"true"}},[v._v("#")]),v._v(" 分辨率切换：不同的尺寸 {#分辨率切换：不同的尺寸}")]),v._v(" "),_("p",[v._v("那么，我们想要用分辨率切换解决什么问题呢？我们想要显示相同的图片内容，仅仅依据设备来显示更大或更小的图片——这是我们在示例中使用第二个内容图像的情况。标准的<img>元素传统上仅仅让你给浏览器指定唯一的资源文件。")]),v._v(" "),_("p",[_("code",[v._v('<img src="elva-fairy-800w.jpg" alt="Elva dressed as a fairy">')])]),v._v(" "),_("p",[v._v("我们可以使用两个新的属性——srcset 和 sizes——来提供更多额外的资源图像和提示，帮助浏览器选择正确的一个资源。")]),v._v(" "),_("p",[_("code",[v._v('<img srcset="elva-fairy-320w.jpg 320w,')])]),v._v(" "),_("p",[_("code",[v._v("elva-fairy-480w.jpg 480w,")])]),v._v(" "),_("p",[_("code",[v._v('elva-fairy-800w.jpg 800w"')])]),v._v(" "),_("p",[_("code",[v._v('sizes="(max-width: 320px) 280px,')])]),v._v(" "),_("p",[_("code",[v._v("(max-width: 480px) 440px,")])]),v._v(" "),_("p",[_("code",[v._v('800px"')])]),v._v(" "),_("p",[_("code",[v._v('src="elva-fairy-800w.jpg" alt="Elva dressed as a fairy">')])]),v._v(" "),_("p",[v._v("srcset和sizes属性看起来很复杂，但是如果你按照上图所示进行格式化，那么他们并不是很难理解，每一行有不同的属性值。每个值都包含逗号分隔的列表。列表的每一部分由三个子部分组成。让我们来看看现在的每一个内容：")]),v._v(" "),_("p",[v._v("srcset定义了我们允许浏览器选择的图像集，以及每个图像的大小。在每个逗号之前，我们写：")]),v._v(" "),_("p",[v._v("一个"),_("strong",[v._v("文件名")]),v._v(" (elva-fairy-480w.jpg.)")]),v._v(" "),_("p",[v._v("一个空格")]),v._v(" "),_("p",[_("strong",[v._v("图像的固有宽度")]),v._v("（以像素为单位）（480w）——注意到这里使用w单位，而不是你预计的px。这是图像的真实大小，可以通过检查你电脑上的图片文件找到。")]),v._v(" "),_("p",[v._v("sizes定义了一组媒体条件（例如屏幕宽度）并且指明当某些媒体条件为真时，什么样的图片尺寸是最佳选择—我们在之前已经讨论了一些提示。在这种情况下，在每个逗号之前，我们写：")]),v._v(" "),_("p",[v._v("一个"),_("strong",[v._v("媒体条件")]),v._v("（(max-width:480px)）——你会在 CSS topic中学到更多的。但是现在我们仅仅讨论的是媒体条件描述了屏幕可能处于的状态。在这里，我们说“当视窗的宽度是480像素或更少”。")]),v._v(" "),_("p",[v._v("一个空格")]),v._v(" "),_("p",[v._v("当媒体条件为真时，图像将填充的"),_("strong",[v._v("槽的宽度")]),v._v("（440px）")]),v._v(" "),_("p",[v._v("注意: 对于槽的宽度，你也许会提供一个固定值 (px, em) 或者是一个相对于视口的长度(vw)，但不是百分比。你也许以及注意到最后一个槽的宽度是没有媒体条件的，它是默认的，当没有任何一个媒体条件为真时，它就会生效。 当浏览器成功匹配第一个媒体条件的时候，剩下所有的东西都会被忽略，所以要注意媒体条件的顺序。")]),v._v(" "),_("p",[v._v("所以，有了这些属性，浏览器会：")]),v._v(" "),_("p",[v._v("查看设备宽度")]),v._v(" "),_("p",[v._v("检查sizes列表中哪个媒体条件是第一个为真")]),v._v(" "),_("p",[v._v("查看给予该媒体查询的槽大小")]),v._v(" "),_("p",[v._v("加载srcset列表中引用的最接近所选的槽大小的图像")]),v._v(" "),_("p",[v._v("就是这样！所以在这里，如果支持浏览器以视窗宽度为480px来加载页面，那么(max-width: 480px)的媒体条件为真，因此440px的槽会被选择，所以elva-fairy-480w.jpg将加载，因为它的的固定宽度（480w）最接近于440px。800px的照片大小为128KB而480px版本仅有63KB大小—节省了65KB。现在想象一下，如果这是一个有很多图片的页面。使用这种技术会节省移动端用户的大量带宽。")]),v._v(" "),_("p",[v._v("老旧的浏览器不支持这些特性，它会忽略这些特征。并继续正常加载 src属性引用的图像文件。")]),v._v(" "),_("p",[v._v('注意: 在 HTML 文件中的 <head> 标签里， 你将会找到这一行代码 <meta name="viewport" content="width=device-width">: 这行代码会强制地让手机浏览器采用它们真实视图的宽度来加载网页（有些手机浏览器会提供不真实的视图宽度, 然后加载比浏览器真实视图的宽度大的宽度的网页，然后再缩小加载的页面，这样的做法对响应式图片或其他设计，没有任何帮助。）')]),v._v(" "),_("h3",{attrs:{id:"一些有用的开发工具-一些有用的开发工具"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一些有用的开发工具-一些有用的开发工具","aria-hidden":"true"}},[v._v("#")]),v._v(" 一些有用的开发工具 {#一些有用的开发工具}")]),v._v(" "),_("p",[v._v("这里有一些在浏览器中的非常实用的开发者工具用来帮助制定重要的槽宽度，以及其他你可能会用到的场景。当我在设置槽宽度的时候，我先加载了示例中的无响应的版本（not-responsive.html），然后进入 响应设计视图 （Tools > Web Developer > Responsive Design View），这个工具允许你在不同设备的屏幕宽度场景下查看网页的布局。")]),v._v(" "),_("p",[v._v("我设置我的视图宽度为 320px，然后再改为 480px；每一次宽度的改变我就进入 DOM 检查 ，点击我们感兴趣的 <img> 元素，然后在显示屏右侧的 Box Model 视图选项卡中查看它的大小。 你应该会看到，这种无响应式的做法会让你的图片在不同屏幕宽度下有着固定的宽度。")]),v._v(" "),_("p",[v._v("接着, 你可以检查 srcset 是否正常工作，你需要将视图的宽度设置为你想要的，(比如，把宽度设置的比较小，让页面看起来比较狭窄），打开网络检查（Tools > Web Developer > Network），然后重新加载页面。网络检查工具会给你一个列表，里面的文件都是已经被下载来构造网页的。然后你可以在这里看到哪个图像文件被下载了。")]),v._v(" "),_("p",[v._v("注意: 在 Chrome 中测试时，通过如下方式禁用缓存：打开 DevTools ，并选中下 Settings > Preferences > Network 的选择框。否则，Chrome 会优先选择缓存图片而不是恰好适配的那个。")]),v._v(" "),_("h3",{attrs:{id:"分辨率切换-相同的尺寸-不同的分辨率"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分辨率切换-相同的尺寸-不同的分辨率","aria-hidden":"true"}},[v._v("#")]),v._v(" 分辨率切换: 相同的尺寸, 不同的分辨率")]),v._v(" "),_("p",[v._v("如果你支持多种分辨率显示，但希望每个人在屏幕上看到的图片的实际尺寸是相同的，你可以让浏览器通过srcset和x语法结合——一种更简单的语法——而不用sizes，来选择适当分辨率的图片。")]),v._v(" "),_("p",[_("code",[v._v('<img srcset="elva-fairy-320w.jpg,')])]),v._v(" "),_("p",[_("code",[v._v("elva-fairy-480w.jpg 1.5x,")])]),v._v(" "),_("p",[_("code",[v._v('elva-fairy-640w.jpg 2x"')])]),v._v(" "),_("p",[_("code",[v._v('src="elva-fairy-640w.jpg" alt="Elva dressed as a fairy">')])]),v._v(" "),_("p",[v._v("在这个例子中，下面的CSS会应用在图片上，所以它的宽度在屏幕上是320像素（也称作CSS像素）：")]),v._v(" "),_("p",[_("code",[v._v("img {")])]),v._v(" "),_("p",[_("code",[v._v("width: 320px;")])]),v._v(" "),_("p",[_("code",[v._v("}")])]),v._v(" "),_("p",[v._v("在这种情况下，sizes并不需要——浏览器只是计算出正在显示的显示器的分辨率，然后提供srcset引用的最适合的图像。因此，如果访问页面的设备具有标准/低分辨率显示，一个设备像素表示一个CSS像素，elva-fairy-320w.jpg会被加载（1x 是默认值，所以你不需要写出来）。如果设备有高分辨率，两个或更多的设备像素表示一个CSS像素，elva-fairy-640w.jpg 会被加载。640px的图像大小为93KB，320px的图像的大小仅仅有39KB。")]),v._v(" "),_("h3",{attrs:{id:"艺术方向-艺术方向"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#艺术方向-艺术方向","aria-hidden":"true"}},[v._v("#")]),v._v(" 艺术方向 {#艺术方向}")]),v._v(" "),_("p",[v._v("艺术方向问题涉及要更改显示的图像以适应不同的图像显示尺寸。例如，如果在桌面浏览器上的一个网站上显示一张大的、横向的照片，照片中央有个人，然后当在移动端浏览器上浏览这个网站时，照片会缩小，这时照片上的人会变得非常小，看起来会很糟糕。这种情况可能在移动端显示一个更小的肖像图会更好，这样人物的大小看起来更合适。<picture>元素允许我们这样实现。")]),v._v(" "),_("p",[v._v("我们有一张图片需要艺术方向：")]),v._v(" "),_("p",[_("code",[v._v('<img src="elva-800w.jpg" alt="Chris standing up holding his daughter Elva">')])]),v._v(" "),_("p",[v._v("让我们改用 <picture>！就像<video>和<audio>，<picture>素包含了一些<source>元素，它使浏览器在不同资源间做出选择，紧跟着的是最重要的<img>元素。")]),v._v(" "),_("p",[_("code",[v._v("<picture>")])]),v._v(" "),_("p",[_("code",[v._v('<source media="(max-width: 799px)" srcset="elva-480w-close-portrait.jpg">')])]),v._v(" "),_("p",[_("code",[v._v('<source media="(min-width: 800px)" srcset="elva-800w.jpg">')])]),v._v(" "),_("p",[_("code",[v._v('<img src="elva-800w.jpg" alt="Chris standing up holding his daughter Elva">')])]),v._v(" "),_("p",[_("code",[v._v("</picture>")])]),v._v(" "),_("p",[v._v("<source>元素包含一个media属性，这一属性包含一个媒体条件——就像第一个srcset例子，这些条件来决定哪张图片会显示——第一个条件返回真，那么就会显示这张图片。在这种情况下，如果视窗的宽度为799px或更少，第一个<source>元素的图片就会显示。如果视窗的宽度是800px或更大，就显示第二张图片。")]),v._v(" "),_("p",[v._v("srcset属性包含要显示图片的路径。请注意，正如我们在<img>上面看到的那样，<source>可以使用引用多个图像的srcset属性，还有sizes属性。所以你可以通过一个 <picture>元素提供多个图片，不过也可以给每个图片提供多分辨率的图片。实际上，你可能不想经常做这样的事情。")]),v._v(" "),_("p",[v._v("在任何情况下，你都必须在 </picture>之前正确提供一个<img>元素以及它的src和alt属性，否则不会有图片显示。当媒体条件都不返回真的时候（你可以在这个例子中删除第二个<source> 元素），它会提供图片；如果浏览器不支持 <picture>元素时，它可以作为后备方案。")]),v._v(" "),_("p",[v._v("这样的代码允许我们在宽屏和窄屏上都能显示合适的图片")]),v._v(" "),_("p",[v._v("注意: 你应该仅仅当在艺术方向场景下使用media属性；当你使用media时，不要在sizes属性中也提供媒体条件。")]),v._v(" "),_("h3",{attrs:{id:"为什么我们不能使用-css-或-javascript-来做到这一效果"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么我们不能使用-css-或-javascript-来做到这一效果","aria-hidden":"true"}},[v._v("#")]),v._v(" 为什么我们不能使用 CSS 或 JavaScript 来做到这一效果?")]),v._v(" "),_("p",[v._v("当浏览器开始加载一个页面, 它会先下载 (预加载) 任意的图片，这是发生在主解析器开始加载和解析页面的 CSS 和 JavaScript 之前的。这是一个非常有用的技巧，平均来说，页面加载的时间少了 20%。但是, 这对响应式图片一点帮助都没有, 所以需要实现类似 srcset的方法。因为你不能先加载好 <img> 元素后, 再用 JavaScript 检测视图的宽度，如果觉得大小不合适，就动态地加载小的图片替换已经加载好的图片，这样的话, 原始的图像已经被加载了, 然后你也加载了小的图像, 这样的做法对于响应式图像的理念来说，是很糟糕的。")]),v._v(" "),_("h3",{attrs:{id:"大胆的使用现代图像格式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大胆的使用现代图像格式","aria-hidden":"true"}},[v._v("#")]),v._v(" 大胆的使用现代图像格式")]),v._v(" "),_("p",[v._v("有很多令人激动的新图像格式（例如WebP和JPEG-2000）可以在有高质量的同时有较低的文件大小。然而，浏览器对其的支持参差不齐。")]),v._v(" "),_("p",[v._v("<picture>让我们能继续满足老式浏览器的需要。你可以在type属性中提供MIME类型，这样浏览器就能立即拒绝其不支持的文件类型：")]),v._v(" "),_("p",[_("code",[v._v("<picture>")])]),v._v(" "),_("p",[_("code",[v._v('<source type="image/svg+xml" srcset="pyramid.svg">')])]),v._v(" "),_("p",[_("code",[v._v('<source type="image/webp" srcset="pyramid.webp">')])]),v._v(" "),_("p",[_("code",[v._v('<img src="pyramid.png" alt="regular pyramid built from four equilateral triangles">')])]),v._v(" "),_("p",[_("code",[v._v("</picture>")])]),v._v(" "),_("p",[v._v("不要使用media属性，除非你也需要艺术方向。")]),v._v(" "),_("p",[v._v("在<source> 元素中，你只可以引用在type中声明的文件类型。")]),v._v(" "),_("p",[v._v("像之前一样，如果必要，你可以在srcset和sizes中使用逗号分割的列表。")])])}],!1,null,null,null);e.default=a.exports}}]);