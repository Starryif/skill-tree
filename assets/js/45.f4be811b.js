(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{190:function(t,_,v){"use strict";v.r(_);var e=v(0),a=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("div",{staticClass:"content"},[v("h1",{attrs:{id:"表格基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#表格基础","aria-hidden":"true"}},[t._v("#")]),t._v(" 表格基础")]),t._v(" "),v("h2",{attrs:{id:"什么是表格？-什么是表格？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是表格？-什么是表格？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是表格？ {#什么是表格？}")]),t._v(" "),v("p",[t._v("表格是由行和列组成的结构化数据集(表格数据)，它能够使你简捷迅速地查找某个表示不同类型数据之间的某种关系的值 。")]),t._v(" "),v("p",[t._v("表格在人类社会中很常见，而且已经存在很长时间了，因此，HTML的创建者们提供了一种方法来构建和呈现web上的表格数据，这也就不足为奇了。")]),t._v(" "),v("h3",{attrs:{id:"表格如何工作？-表格如何工作？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#表格如何工作？-表格如何工作？","aria-hidden":"true"}},[t._v("#")]),t._v(" 表格如何工作？ {#表格如何工作？}")]),t._v(" "),v("p",[t._v("表格的一个特点就是严格. 通过在行和列的标题之间进行视觉关联的方法，就可以让信息能够很简单地被解读出来。")]),t._v(" "),v("p",[t._v("正确完成后, 即使是盲人也可以解析 HTML 表格中的数据，一个成功的 HTML 表格应该做到无论用户是视力正常还是视力受损，都能提高用户的体验。")]),t._v(" "),v("h3",{attrs:{id:"表格风格-表格风格"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#表格风格-表格风格","aria-hidden":"true"}},[t._v("#")]),t._v(" 表格风格 {#表格风格}")]),t._v(" "),v("p",[t._v("某个表格看上去可读性不是很好，那是因为现在这个页面上面的那个表格通过 MDN 站点添加了一些样式, 而 GitHub 上面的并没有添加。")]),t._v(" "),v("p",[t._v("不要幻想; 为了能够让表格在网页上有效, 你需要提供一些 CSS 的样式信息，以及尽可能好的 HTML 固定结构.")]),t._v(" "),v("p",[t._v("虽然在这个模块中我们不会专注于 CSS, 但是我们提供了一个较小的 CSS 样式表让你使用，和默认的没有采用任何 CSS 样式的表相比，表格会更加可读。")]),t._v(" "),v("h3",{attrs:{id:"什么时候你不应该使用-html-表格-什么时候你不应该使用-html-表格"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么时候你不应该使用-html-表格-什么时候你不应该使用-html-表格","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么时候你不应该使用 HTML 表格? {#什么时候你不应该使用_HTML_表格}")]),t._v(" "),v("p",[t._v("HTML 表格 应该用于表格数据 ，这正是 HTML 表格设计出来的用途. 不幸的是, 许多人习惯用 HTML 表格来实现网页布局， e.g. 一行包含 header, 一行包含几列内容, 一行包含 footer, etc.")]),t._v(" "),v("p",[t._v("这种做法以前是很常见的，因为以前 CSS 在不同浏览器上的兼容性比较糟糕 ; 表格布局现在不太普遍，但您可能仍然会在网络的某些角落看到它们。")]),t._v(" "),v("p",[t._v("简单来说, 使用表格布局而不使用 CSS layout techniques 是很糟糕的. 主要的理由有以下几个:")]),t._v(" "),v("p",[t._v("表格布局减少了视觉受损的用户的可访问性: 屏幕阅读器, 被盲人所使用, 解析存在于 HTML 页面上的标签，然后为用户读出其中的内容。因为对于布局来说，表格不是一个正确的工具， 使用的标记比使用 CSS 布局技术更复杂, 所以屏幕阅读器的输出会让他们的用户感到困惑。")]),t._v(" "),v("p",[t._v("表格会产生很多标签: 正如刚才提到的, 表格布局通常会比正确的布局技术涉及更复杂的标签结构，这会导致代码变得更难于编写、维护、调试.")]),t._v(" "),v("p",[t._v("表格不能自动响应: 当你使用正确的"),v("strong",[t._v("布局容器")]),t._v(" (比如 <header>, <section>, <article>, 或是 <div>), 它们的默认宽度是父元素的 100%. 而表格的的默认大小是根据其内容而定的。因此，需要采取额外的措施来获取表格布局样式，以便有效地在各种设备上工作。")]),t._v(" "),v("h2",{attrs:{id:"创建你的第一个表格-动手练习-创建你的第一个表格"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建你的第一个表格-动手练习-创建你的第一个表格","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建你的第一个表格 {#动手练习_创建你的第一个表格}")]),t._v(" "),v("p",[t._v("每一个表格的内容都包含在这两个标签中 : <table></table>. 在你的 HTML 的 <body> 中添加这些内容。")]),t._v(" "),v("p",[t._v("在表格中，最小的内容容器是单元格, 是通过 <td> 元素创建的 ('td' 代表 'table data').")]),t._v(" "),v("p",[v("code",[t._v("<td>Hi, I'm your first cell.</td>")])]),t._v(" "),v("p",[t._v("单元格不会放置在彼此的下方, 而是自动与同一行上的其他单元格对齐. 每个 <td> 元素 创建一个单独单元格，它们共同组成了第一行。我们添加的每个单元格都使行的长度变长。")]),t._v(" "),v("p",[t._v("如果想让这一行停止增加，并让单元格从第二行开始，我们需要使用 <tr> 元素 ('tr' 代表 'table row').")]),t._v(" "),v("p",[v("code",[t._v("<tr>")])]),t._v(" "),v("p",[v("code",[t._v("<td>Hi, I'm your first cell.</td>")])]),t._v(" "),v("p",[v("code",[t._v("<td>I'm your second cell.</td>")])]),t._v(" "),v("p",[v("code",[t._v("<td>I'm your third cell.</td>")])]),t._v(" "),v("p",[v("code",[t._v("<td>I'm your fourth cell.</td>")])]),t._v(" "),v("p",[v("code",[t._v("</tr>")])]),t._v(" "),v("h2",{attrs:{id:"使用-th-元素添加标题-使用-元素添加标题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用-th-元素添加标题-使用-元素添加标题","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 <th> 元素添加标题 {#使用_"),v("th",[t._v("_元素添加标题}")])]),t._v(" "),v("p",[t._v("表格中的标题是特殊的单元格，通常在行或列的开始处，定义行或列包含的数据类型。")]),t._v(" "),v("p",[t._v("为了将表格的标题在"),v("strong",[t._v("视觉上")]),t._v("和"),v("strong",[t._v("语义上")]),t._v("都能被识别为标题，你可以使用 <th> 元素 ('th' 代表 'table header'). 用法和 <td>是一样的，除了它表示为标题，不是普通的单元格以外。进入你的 HTML 文件, 将表格中应该是标题的 <td> 元素标记的内容，都改为用 <th> 元素标记。")]),t._v(" "),v("h3",{attrs:{id:"为什么标题是有用的-为什么标题是有用的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么标题是有用的-为什么标题是有用的","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么标题是有用的? {#为什么标题是有用的}")]),t._v(" "),v("p",[t._v("当标题明显突出的时候，你可以更加简单地找到你想找的数据，设计上也会看起来更好。")]),t._v(" "),v("p",[t._v("注意: 即使你不给表格添加你自己的样式，表格标题也会带有一些默认样式：加粗和居中，让标题可以突出显示。")]),t._v(" "),v("p",[t._v("表格标题也有额外的好处，随着 scope 属性，这个属性允许你让表格变得更加无障碍，每个标题与相同行或列中的所有数据相关联。屏幕阅读设备能一次读出一列或一行的数据，这是非常有帮助的。")]),t._v(" "),v("h2",{attrs:{id:"允许单元格跨越多行和列-允许单元格跨越多行和列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#允许单元格跨越多行和列-允许单元格跨越多行和列","aria-hidden":"true"}},[t._v("#")]),t._v(" 允许单元格跨越多行和列 {#允许单元格跨越多行和列}")]),t._v(" "),v("p",[t._v('表格中的标题和单元格有 colspan 和 rowspan 属性，这两个属性可以帮助实现这些效果。这两个属性接受一个没有单位的数字值，数字决定了它们的宽度或高度是几个单元格。比如, colspan="2" 使一个单元格的宽度是两个单元格。')]),t._v(" "),v("h2",{attrs:{id:"为表格中的列提供共同的样式-为表格中的列提供共同的样式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为表格中的列提供共同的样式-为表格中的列提供共同的样式","aria-hidden":"true"}},[t._v("#")]),t._v(" 为表格中的列提供共同的样式 {#为表格中的列提供共同的样式}")]),t._v(" "),v("p",[t._v("HTML有一种方法可以定义整列数据的样式信息：就是** <col>** 和** <colgroup>** 元素。 它们存在是因为如果你想让一列中的每个数据的样式都一样，那么你就要为每个数据都添加一个样式，这样的做法是令人厌烦和低效的。你通常需要在列中的每个 <td> 或 <th> 上定义样式，或者使用一个复杂的选择器，比如 :nth-child()。")]),t._v(" "),v("p",[v("code",[t._v("<table>")])]),t._v(" "),v("p",[v("code",[t._v("<tr>")])]),t._v(" "),v("p",[v("code",[t._v("<th>Data 1</th>")])]),t._v(" "),v("p",[v("code",[t._v('<th style="background-color: yellow">Data 2</th>')])]),t._v(" "),v("p",[v("code",[t._v("</tr>")])]),t._v(" "),v("p",[v("code",[t._v("<tr>")])]),t._v(" "),v("p",[v("code",[t._v("<td>Calcutta</td>")])]),t._v(" "),v("p",[v("code",[t._v('<td style="background-color: yellow">Orange</td>')])]),t._v(" "),v("p",[v("code",[t._v("</tr>")])]),t._v(" "),v("p",[v("code",[t._v("<tr>")])]),t._v(" "),v("p",[v("code",[t._v("<td>Robots</td>")])]),t._v(" "),v("p",[v("code",[t._v('<td style="background-color: yellow">Jazz</td>')])]),t._v(" "),v("p",[v("code",[t._v("</tr>")])]),t._v(" "),v("p",[v("code",[t._v("</table>")])]),t._v(" "),v("p",[t._v("这样不太理想，因为我们不得不在列中的每个单元格中重复那些样式信息 (在真实的项目中，我们或许会设置一个 class 包含那三个单元格 ，然后在一个单独的样式表中定义样式). 为了舍弃这种做法，我们可以只定义一次，在 <col> 元素中。<col> 元素被规定包含在 <colgroup> 容器中，而 <colgroup>就在 <table> 标签的下方。我们可以通过如下的做法来创建与上面相同的效果:")]),t._v(" "),v("p",[v("code",[t._v("<table>")])]),t._v(" "),v("p",[v("code",[t._v("<colgroup>")])]),t._v(" "),v("p",[v("code",[t._v("<col>")])]),t._v(" "),v("p",[v("code",[t._v('<col style="background-color: yellow">')])]),t._v(" "),v("p",[v("code",[t._v("</colgroup>")])]),t._v(" "),v("p",[v("code",[t._v("<tr>")])]),t._v(" "),v("p",[v("code",[t._v("<th>Data 1</th>")])]),t._v(" "),v("p",[v("code",[t._v("<th>Data 2</th>")])]),t._v(" "),v("p",[v("code",[t._v("</tr>")])]),t._v(" "),v("p",[v("code",[t._v("<tr>")])]),t._v(" "),v("p",[v("code",[t._v("<td>Calcutta</td>")])]),t._v(" "),v("p",[v("code",[t._v("<td>Orange</td>")])]),t._v(" "),v("p",[v("code",[t._v("</tr>")])]),t._v(" "),v("p",[v("code",[t._v("<tr>")])]),t._v(" "),v("p",[v("code",[t._v("<td>Robots</td>")])]),t._v(" "),v("p",[v("code",[t._v("<td>Jazz</td>")])]),t._v(" "),v("p",[v("code",[t._v("</tr>")])]),t._v(" "),v("p",[v("code",[t._v("</table>")])]),t._v(" "),v("p",[t._v("我们使用了两个 <col>来定义“列的样式”，每一个<col>都会制定每列的样式，对于第一列，我们没有采取任何样式，但是我们仍然需要添加一个空的 <col> 元素，如果不这样做，那么我们的样式就会应用到第一列上，这和我们预想的不一样。")]),t._v(" "),v("p",[t._v("如果你想把这种样式信息应用到每一列，我们可以只使用一个 <col> 元素，不过需要包含 span 属性")]),t._v(" "),v("p",[v("code",[t._v("<colgroup>")])]),t._v(" "),v("p",[v("code",[t._v('<col style="background-color: yellow" span="2">')])]),t._v(" "),v("p",[v("code",[t._v("</colgroup>")])]),t._v(" "),v("p",[t._v("就像 colspan 和 rowspan, span 需要一个无单位的数字值，用来制定你想要让这个样式应用到表格中多少列")])])}],!1,null,null,null);_.default=a.exports}}]);