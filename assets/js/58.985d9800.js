(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{177:function(n,t,a){"use strict";a.r(t);var r=a(0),e=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"整体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体","aria-hidden":"true"}},[n._v("#")]),n._v(" 整体")]),n._v(" "),a("h2",{attrs:{id:"不容错过的python语言概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不容错过的python语言概述","aria-hidden":"true"}},[n._v("#")]),n._v(" 不容错过的Python语言概述")]),n._v(" "),a("h3",{attrs:{id:"演进中的编程语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#演进中的编程语言","aria-hidden":"true"}},[n._v("#")]),n._v(" 演进中的编程语言")]),n._v(" "),a("p",[n._v("1.计算机技术演进阶段所解决的问题\n1946-1981：计算机系统结构时代，计算机性能问题，C\n1981-2008：网络和视窗时代，计算交互问题,Java/html/vc/asp\n2008-2016：复杂信息系统时代，数据周期问题,js/java/c++/php/r\n2016至今：人工智能时代，人类需求问题,python")]),n._v(" "),a("h3",{attrs:{id:"编译和解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译和解释","aria-hidden":"true"}},[n._v("#")]),n._v(" 编译和解释")]),n._v(" "),a("p",[n._v("1.编程语言的执行方式\n编译执行：将源代码一次性转换成目标代码的过程，之后不需要源代码\n解释执行：将源代码逐条转换成目标代码同时逐条运行的过程\n2.静态语言和脚本语言\n静态语言：编译执行。C、C++、Java、Verilog\n脚本语言：解释执行。PHP、JavaScript、HTML、Python\n3.静态语言的优点\n编译过程没有时间限制，优化更充分，执行速度更快\n编译后程序可以在同系列系统中直接执行，不需要执行环境\n4.脚本语言的优点\n执行过程需要源代码，程序维护更灵活\n通过在不同系统中配置执行环境，可以实现源代码的跨平台执行")]),n._v(" "),a("h3",{attrs:{id:"python语言特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python语言特点","aria-hidden":"true"}},[n._v("#")]),n._v(" Python语言特点")]),n._v(" "),a("p",[n._v("1.Python是通用语言，脚本语言，胶水语言，跨平台语言，多模型语言\n2.语言简洁 开源生态")]),n._v(" "),a("p",[n._v("##计算生态与超级语言\n1.大教堂模式 VS 集市模式\n2.计算生态没有顶层设计，以功能为单位，具备三个特点：竞争发展、相互依存、迅速更迭\n3.API!=计算生态")]),n._v(" "),a("h2",{attrs:{id:"python开发工具及环境配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python开发工具及环境配置","aria-hidden":"true"}},[n._v("#")]),n._v(" Python开发工具及环境配置")]),n._v(" "),a("h3",{attrs:{id:"idle开发工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#idle开发工具","aria-hidden":"true"}},[n._v("#")]),n._v(" IDLE开发工具")]),n._v(" "),a("p",[n._v("1.python官方网站http://www.python.org/\n2.IDLE开发环境\n①交互式环境")]),n._v(" "),a("blockquote",[a("blockquote",[a("blockquote",[a("p",[n._v("是交互式的提示符\n每输入一行代码，运行相应结果\n②文件式环境\nCTRL+N启动一个文本编辑器\nIDLE提供的Python文件式环境\n3.快捷键\nCTRL+N：在IDLE交互界面下，用来启动IDLE编辑器\nCTRL+Q：退出IDLE或IDLE编辑器\nALT+3：在IDLE编辑器内，注释选定区域文本\nALT+4：在IDLE编辑器内，解除注释选定区域文本\nALT+Q：在IDLE编辑器内，将Python代码进行格式化布局\nF5：在IDLE编辑器内，执行Python程序")])])])]),n._v(" "),a("h3",{attrs:{id:"pycharm开发工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pycharm开发工具","aria-hidden":"true"}},[n._v("#")]),n._v(" Pycharm开发工具")]),n._v(" "),a("p",[n._v("1.Pycharm官方网站http://www.jetbrains.com/pycharm.\n2.IDE(集成开发环境)")]),n._v(" "),a("h3",{attrs:{id:"其它开发环境概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它开发环境概述","aria-hidden":"true"}},[n._v("#")]),n._v(" 其它开发环境概述")]),n._v(" "),a("p",[n._v("1.文本工具类\nNotepad++、Vim&Emacs、Sublime Text、Atom、Komodo Edit\n2.集成工具类\nWing、PyDev&Eclipse、Visual Studio、Visual Studio Code、Anaconda&Spyder")]),n._v(" "),a("h2",{attrs:{id:"实例1：温度转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例1：温度转换","aria-hidden":"true"}},[n._v("#")]),n._v(" 实例1：温度转换")]),n._v(" "),a("h3",{attrs:{id:"温度转换需求分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#温度转换需求分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 温度转换需求分析")]),n._v(" "),a("p",[n._v("1.两种温度体系的转换：摄氏度&华氏度")]),n._v(" "),a("h3",{attrs:{id:"温度转换实例编写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#温度转换实例编写","aria-hidden":"true"}},[n._v("#")]),n._v(" 温度转换实例编写")]),n._v(" "),a("p",[n._v('#TempCovert.py\nTempStr = input("请输入带有符号的温度值：")\nif TempStr[-1] in [\'f\',\'F\']:\nC = (eval(TempStr[0:-1])-32)/1.8\nprint("转换后的温度是{:.2f}C".format(C))\nelif TempStr[-1] in ["c","C"]:\nF = eval(TempStr[0:-1])*1.8+32\nprint("转换后的温度是{:.2f}F".format(F))\nelse:\nprint("输入格式有误")')]),n._v(" "),a("h2",{attrs:{id:"python基本编程解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python基本编程解析","aria-hidden":"true"}},[n._v("#")]),n._v(" Python基本编程解析")]),n._v(" "),a("h3",{attrs:{id:"程序的格式框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序的格式框架","aria-hidden":"true"}},[n._v("#")]),n._v(" 程序的格式框架")]),n._v(" "),a("p",[n._v("1.冒号+缩进：Python语法功能的一部分，表达代码的所属关系\n分支语句：if-elif-else\n循环语句：for,while\n异常处理：try-except-else-finally\n函数定义：def\n类定义：class\n冒号+缩进是语法的一部分，缩进不正确程序运行错误\n冒号+缩进是表达代码间包含和层次关系的唯一方式\n只需要所有缩进长度一致即可，可采用N个空格或Tab，建议4个空格\n2.注释：程序中的辅助性说明信息\n单行注释：#开始\n多行注释：一对'''\n3.续行符:Python程序跨行书写的表示符号\n续行符后不能存在空格\n续行符后必须直接换行")]),n._v(" "),a("h3",{attrs:{id:"命名与保留字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名与保留字","aria-hidden":"true"}},[n._v("#")]),n._v(" 命名与保留字")]),n._v(" "),a("p",[n._v("1.变量：程序中用于保存和表示数据的占位符号\n变量的使用无需定义，可以直接使用\n变量的复制：使用等号（=）为变量赋值\n2.命名：设定标识符的过程，用于变量、函数、类名等\nPython3用Unicode编码，因此，可以支持中文等非西文符号\n命名采用大小写字母、数字、下划线和中文等字符组成\n大小写敏感、首字符不能是数字、不能与保留字相同\n注意：部分_*或__*形式的名字被留作系统功能使用，建议不这样命名\n3.保留字：被编程语言内部定义并保留使用的标识符，共33个\nand as assert break class continue def elif else except finally for from if import in is lambda not or pass raise return try while with yield del global nonlaocal True False None")]),n._v(" "),a("h3",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[n._v("#")]),n._v(" 数据类型")]),n._v(" "),a("p",[n._v("1.数字类型：整数类型\n与数学中的整数含义相同，无取值范围\n整数包括二进制、八进制、十进制、十六进制等4种形式\n0b1010=0o12=12=0xa\n2.数字类型：浮点数类型\n与数学中的实数含义相同，带有小数及小数点的数字，存在取值范围\n浮点数包括常规方法和科学计数法2种方式表示\n0.0043=4.3e-3\n3.数字类型：复数类型\n与数学中的复数概念相同，定义j=-1的开方，复数表示为a+bj\nz=a+bj，a是实部，b是虚部，a和b都是浮点数\nz.real获得z的实部，z.imag获得z的虚部\n4.字节类型：字符串类型\n由0个或多个字符组成的有序字符序列\n字符串由一对单引号或一对双引号表示\n字符串是字符的有序序列，可以用序号访问\n正向递增序列，反向递减序列\n索引：s[N]通过序号获取单个字符\n切片：s[N:M]获取N到M（不含）子串\n5.字节类型：字节串类型\n有0个或多个字节组成的有序序列，每字节对应值0-255（0-\\xff）\n字节串由前导符b或B与一对单引号或双引号表示，如b'a\\xf6'\n0-255间非可打印字符用\\xNN方式表示，N是一个十六进制字符\n6.组合类型：集合类型\n多个元素的无序组合\n集合使用大括号{}表示，元素间用逗号分隔，建立非空集合使用{}或set{}函数\n7.组合类型：元组类型\n序列类型的一种，元素间的有序组合，一旦创建不能被修改\n元组使用小括号()表示，元素间用逗号分隔，小括号可以省略\n8.组合类型：列表类型\n序列类型的一种，元素间的有序组合，类型不限，创建后可以随时被修改\n列表使用中括号[]表示，元素间用逗号分隔，括号不可省略\n9.组合类型：字典类型\n字典类型是键值对集合，反映了数据之间的映射关系\n字典使用大括号{}表示，键值间用冒号分隔，键值对间用逗号分隔")]),n._v(" "),a("h3",{attrs:{id:"赋值与分支语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值与分支语句","aria-hidden":"true"}},[n._v("#")]),n._v(" 赋值与分支语句")]),n._v(" "),a("p",[n._v("1.赋值语句：给变量赋予新数据值的过程\n赋值语句以等号(=)为标志，将右侧值赋予左侧，同时赋值数据类型\n同步赋值语句：同时给多个变量赋值的过程\n<变量1>,<变量2>,...,<变量N>=<表达式1>,<表达式2>,...,<表达式N>\n同时赋值，可用于交换变量值\nx=99\ny=11\nx,y=y,x\n2.分支语句：单分支、二分分支、多分支\n分支语句使用保留字：if、elif、else\n单分支：仅使用if的分支语句\n二分支：使用if-else的分支语句\n多分支：使用if-elif-else的分支语句\nif <条件1>:\n<语句块1>\nelif <条件2>:\n<语句块2>\n...\nelse:\n<语句块N>")]),n._v(" "),a("h3",{attrs:{id:"python程序的输入输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python程序的输入输出","aria-hidden":"true"}},[n._v("#")]),n._v(" Python程序的输入输出")]),n._v(" "),a("p",[n._v('1.输入函数input():从控制台获得用户输入\n<变量>=input(<提示性信息>)\n<提示性信息>为字符串形式，可省略\n<变量>为字符串类型\necho=input("请输入：")\n2.输出函数print():以字符形式向控制台输出结果\nprint(<拟输出字符串或字符串变量>)\nprint()函数有3中主要的使用方法\nprint()用法1：将单一字符串或变量直接输出\necho="这是一个字符串"\nprint(echo)\nprint("这是一个字符串")\nprint()用法2：将多个字符串或变量直接输出\necho1="字符串1"\necho2="字符串2"\nprint(echo1,echo2)\nprint()用法3：字符串和变量的混合输出\necho=\'a\'\nprint("这是变量{}的输出".format(echo))\n3.回声程序：最短输入输出程序\nprint(input())')]),n._v(" "),a("h3",{attrs:{id:"温度转换代码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#温度转换代码分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 温度转换代码分析")]),n._v(" "),a("p",[n._v("1.in保留字:成员判断\nprint('f'in ['f','F']) True\n2.评估函数eval():去掉参数最外侧引号并执行余下语句的函数\nprint(eval(\"1+2\"))   3\neval(\"print('hello')\")   hello")]),n._v(" "),a("h2",{attrs:{id:"实例2：日志文件分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例2：日志文件分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 实例2：日志文件分析")]),n._v(" "),a("p",[n._v('1、#SensorReader.py\n#2019-09-04 01:23:16.33393 19.3024 38.4629 45.08 2.68742\ntry:\nf=open("sensor-data.txt",\'r\')\ncnt,avg = 0,0\nfor line in f:\nls = line.spilt()\ncnt+=1\navg+=eval(ls[2])\nprint("平均的温度值是:{:.2f}".format(avg/cnt))\nf.close()\nexcept:\nprint("文件失败错误")\n2、字符串的split()方法\nsplit()方法:能够根据空格分隔字符串，结果保存在列表变量中\nls=\'1 2 3\'.split()\nprint(ls)')]),n._v(" "),a("h2",{attrs:{id:"python基本编程解析-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python基本编程解析-2","aria-hidden":"true"}},[n._v("#")]),n._v(" Python基本编程解析")]),n._v(" "),a("h3",{attrs:{id:"文件读写操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件读写操作","aria-hidden":"true"}},[n._v("#")]),n._v(" 文件读写操作")]),n._v(" "),a("p",[n._v("1.文件处理的步骤：打开-操作-关闭\nf=open(,) f.close()\n文件的存储状态<->文件的占用状态\nopen()函数打开文件\n变量f是文件句柄，内部是文件对象\n.close()方法关闭文件\n2.<变量名>=open(<文件名>,<打开模式>)\n文件句柄\n文件路径和名称，源文件同目录可省路径\n文本or二进制，读or写\n3.'r'：只读模式，默认值，如果文件不存在，返回FileNotFoundError\n'w':覆盖写模式，文件不存在则创建，存在则完全覆盖\n4.一次性全部读入文本\nf=open('f.txt','r')\ntxt=f.read()\nf.close()\n5.按行读入文本\nf=open('f.txt','r')\nfor line in f:\nf.close()")]),n._v(" "),a("h3",{attrs:{id:"循环语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环语句","aria-hidden":"true"}},[n._v("#")]),n._v(" 循环语句")]),n._v(" "),a("p",[n._v("1.Python包括两种循环：遍历循环 无限循环\n遍历循环：由for和in组成，从遍历结构中逐一获得元素进行循环\nfor <循环变量> in <遍历结构>:\n<语句块>\n无限循环：使用while保留字，由条件控制循环过程\nwhile <条件>：\n<语句块>")]),n._v(" "),a("h3",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理","aria-hidden":"true"}},[n._v("#")]),n._v(" 异常处理")]),n._v(" "),a("p",[n._v("异常处理：对程序执行异常的处理机制，提高用户体验\ntry:\n<语句块1>\nexcept:\n<语句块2>\n使用try-except保留字\n捕获语句块1中异常，采用语句块2进行处理")]),n._v(" "),a("h2",{attrs:{id:"实例3：中文词语统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例3：中文词语统计","aria-hidden":"true"}},[n._v("#")]),n._v(" 实例3：中文词语统计")]),n._v(" "),a("p",[n._v("#WordsCount.py\nimport jieba\nf=open(\"2018年一号文件.txt\",'r',encoding=\"utf-8\")\ntxt=f.read()\nf.close()\nls=jieba.lcut(txt)\nd={}\nfor w in ls:\nd[w]=d.get(w,0)+1\nfor k in d:\nif d[k] >= 50 and k !='\\n':\nprint(\"'{}'出现的次数是{}.format(k,d[k])\")")])])}],!1,null,null,null);t.default=e.exports}}]);