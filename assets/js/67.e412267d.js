(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{169:function(n,t,e){"use strict";e.r(t);var a=e(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"破解基础知识之认识壳与程序的特征"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#破解基础知识之认识壳与程序的特征","aria-hidden":"true"}},[n._v("#")]),n._v(" 破解基础知识之认识壳与程序的特征")]),n._v(" "),e("p",[n._v("一个程序从编译出来的时候一般都是没有壳的，不同编译器编译出的无壳程序也是不相同的。特征主要从“入口点代码”、“程序区段”和“加载模块”等信息来确定。")]),n._v(" "),e("p",[n._v("近两年从行业看已经很少有新的windows加壳软件出现了，大部分开发者都转战移动平台，由于windows加密商业需求逐渐降低，所以加壳程序的增长也是有限了，并不会增加太多。")]),n._v(" "),e("p",[n._v("一：程序是什么语言编译的\n从目前国内接触到程序看，比较流行的编译器有：VC系列、易语言、.NET、Delphi，一些曾经用的很多但渐渐少了有：VB、ASM、BC++，还有一些用的比较少的有：AutoIt、PB、QT等。")]),n._v(" "),e("p",[n._v("1、VC6编译无壳程序\nOllyDbg查看入口点代码如下：\nAddress:00401700;Hex dump:55;Disassembly:push ebp;Comment:VC6编译\nPEID查看区段如下：.text、.rdata、.data和.rsrc\nVC6特点：入口点代码是固定的代码，入口调用的API也是相同的，其中有的push地址不同程序可能不同；区段有四个也是固定的.text、.rdata、.data和.rsrc。")]),n._v(" "),e("p",[n._v("2.VS2008和VS2013编译无壳程序\nOllyDbg查看入口点代码如下：\nAddress:002ADDAC;Hex dump:E8 EF4E0000;Disassembly:call 吾爱破解.002B2CA0;Comment:第一行代码是CALL xxxxx\nAddress:002B2CA0;Hex dump:8BFF;Disassembly:nov edi,edi;Comment:第一个Call里的代码\nPEID查看区段如下：.text、.rdata、.data、.rsrc、.reloc\nVS特点：入口点只有两行代码，一个CALL后直接JMP，第一个CALL进去后调用的API也是相同的；区段相对于VC6多了一个.reloc。")]),n._v(" "),e("p",[n._v("3.易语言编译无壳程序（独立编译和非独立编译）\n易语言独立编译是调用VC的链接程序编译的，所以从区段和入口代码特征和VC相同\n易语言特点：可以从程序里找一些call的调用最终都会走到上面核心代码图位置，这个方法可以区分和VC的区别，非独立编译比较容易识别，入口特征和模块特征都有krnln.fnr。")]),n._v(" "),e("p",[n._v("4、Delhpi编译无壳程序")]),n._v(" "),e("p",[n._v("二：如何识别加壳")]),n._v(" "),e("p",[n._v("1、通过PEiD、Exeinfo PE等查壳工具对内置各种壳的十六进制特征码进行对比查壳\nPEiD、FFI、FastScanner、RDG Packer Detector这类程序都是通过目录下的userdb.txt（查壳程序不同可能数据库名有出入）数据库进行加壳程序特征对比的，由于userdb.txt文件都是好多年前的了，全球基本都在用fly在09年发布的UpKPEiDSign，即使有新的也都基于他制作的版本之上进行更新的，而且更新都没有太好效果，由于原理都是通过对加壳程序的特征进行对应，而这些加壳特征都是个人总结而来，对加壳程序的模糊搜索对比造成可靠性不高，特别是对于VMProtect这类加密壳程序，经常被识别成一些乱七八糟都没见过的加壳内容，特别是显示UPolyX，基本都是误报，对新手的误导很严重，但对于传统的一些压缩壳的识别效果还是很好的，正是由于它的开放性特征库，方便自己编写特征的方法，来识别一些新的壳。\nExeinfo PE属于新一代查壳工具，作者目前还在更新，它和PEiD的区别可能就在于它的特征库是作者自己维护，不支持外部修改，新版好像也开始支持外部特征库了，这款查壳工具的加壳特征库比较准确而且范围很广，如ThemIDA、WinLicense、VMProtect、ZProtect、Shielden都可以轻松识别出来，但对于具体加壳程序的版本都是模糊的，其实加壳版本真的不重要，Exeinfo PE可以说是目前可以说最好的查壳工具了。")]),n._v(" "),e("p",[n._v("2、通过入口特征和区段特征来识别\n区段信息可以通过PEiD的EP处点击获取到。")]),n._v(" "),e("p",[n._v("入口特征可以通过OllyDBG载入获得，载入后可以按一下“Ctrl+A”，让OD分析一下代码，就可以把入口点一些特征字符串分析出来。")]),n._v(" "),e("p",[n._v("三：程序加的是什么壳\n目前windows程序状态大体可以分为以下几种类型：未加壳、压缩壳、传统加密壳、代码虚拟化保护、.Net程序加密。")]),n._v(" "),e("p",[n._v("1.ASLR:一种针对缓冲区溢出的安全保护技术")]),n._v(" "),e("h2",{attrs:{id:"q-a"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q-a","aria-hidden":"true"}},[n._v("#")]),n._v(" Q&A")]),n._v(" "),e("p",[n._v("1.问脱壳插件有异常，提示内存无法读取。\n解答：不要用win7/win8脱壳，换论坛xp虚拟机，原因是ASLR基地址随机化脱壳插件获取的地址不对。")]),n._v(" "),e("p",[n._v("2.问为什么脱壳地址和视频里的地址不同。\n解答：不要用win7/win8脱壳，换论坛xp虚拟机，原因是ASLR基地址随机化导致地址不同。")]),n._v(" "),e("p",[n._v("3.问异常法脱壳去掉忽略异常后怎么无法暂停。\n解答：OD插件--StrongOD--Options--Skip Some Exceptions选项取消，重启OD再试试。")]),n._v(" "),e("p",[n._v("4.问xp上脱完壳到win7/win8系统上就无法运行了。\n解答：\n原因一：IAT未完全修复成功导致的，重新修复，不要用脱壳插件，使用LordPE来dump再用ImpREC（最好用Scylla修复，ImpREC对一些新系统的API支持不好）来修复IAT（千万不要使用OllyDump插件来脱壳，老东西bug多，脱完无法运行不计其数）.\n原因二：由于ASLR和重定位表问题，详见：http://www.52pojie.cn/thread-382462-1-1.html")]),n._v(" "),e("p",[n._v("5.问脱完壳用Exenfo PE查壳显示“Unknown Packer-Protector”未知。\n解答：知道脱完就好了，脱完的vs2008的程序Exenfo PE没能识别出来，但根据它的提示使用它的插件“advance scan”是可以扫描出来的，可以试一下。")]),n._v(" "),e("p",[n._v("6.问如何知道是否脱壳成功。\n解答：简单的说脱完壳后可以正常运行，OEP入口代码为无壳代码特征，IAT解密完、资源没有被压缩即可。")]),n._v(" "),e("p",[n._v("7.问如何完美脱壳和处理重定位。\n解答：转了一些fly的帖子，大家可以参考：\nhttp://www.52pojie.cn/thread-382879-1-1.html\nhttp://www.52pojie.cn/thread-382872-1-1.html\nhttp://www.52pojie.cn/thread-382870-1-1.html")]),n._v(" "),e("p",[n._v("8、关于ximo脱壳教程和论坛虚拟机机中OD使用可能遇到的问题。\n解答：OD不要直接在虚拟机的共享文件夹加载文件，请把文件复制到虚拟机磁盘上再进行调试。")])])}],!1,null,null,null);t.default=r.exports}}]);