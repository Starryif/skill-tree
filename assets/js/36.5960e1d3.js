(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{220:function(_,v,t){"use strict";t.r(v);var e=t(0),a=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"发送表单数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发送表单数据","aria-hidden":"true"}},[_._v("#")]),_._v(" 发送表单数据")]),_._v(" "),t("h2",{attrs:{id:"数据都去哪儿了？-数据都去哪儿了？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据都去哪儿了？-数据都去哪儿了？","aria-hidden":"true"}},[_._v("#")]),_._v(" 数据都去哪儿了？ {#数据都去哪儿了？}")]),_._v(" "),t("h3",{attrs:{id:"客户端-服务器体系结构-客户端服务器体系结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端-服务器体系结构-客户端服务器体系结构","aria-hidden":"true"}},[_._v("#")]),_._v(" 客户端/服务器体系结构 {#客户端服务器体系结构}")]),_._v(" "),t("p",[_._v("web基于非常基本的客户端/服务器体系结构，可以总结如下:客户端(通常是web浏览器)向服务器发送请求(大多数情况下是Apache、Nginx、IIS、Tomcat等web服务器)，使用HTTP 协议。服务器使用相同的协议来回答请求。")]),_._v(" "),t("p",[_._v("在客户端，HTML表单只不过是一种方便的用户友好的方式，可以配置HTTP请求将数据发送到服务器。这使用户能够提供在HTTP请求中传递的信息。")]),_._v(" "),t("h3",{attrs:{id:"在客户端-定义如何发送数据-在客户端定义如何发送数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在客户端-定义如何发送数据-在客户端定义如何发送数据","aria-hidden":"true"}},[_._v("#")]),_._v(" 在客户端:定义如何发送数据 {#在客户端定义如何发送数据}")]),_._v(" "),t("p",[_._v("<form>元素定义了如何发送数据。它的所有属性都是为了让您配置当用户点击提交按钮时发送的请求。两个最重要的属性是action和method。")]),_._v(" "),t("h4",{attrs:{id:"action-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#action-属性","aria-hidden":"true"}},[_._v("#")]),_._v(" action 属性")]),_._v(" "),t("p",[_._v("这个属性定义了发送数据要去的位置。它的值必须是一个有效的URL。如果没有提供此属性，则数据将被发送到包含表单的页面的URL。")]),_._v(" "),t("p",[_._v("数据被发送到一个绝对URL —— http://foo.com：")]),_._v(" "),t("p",[t("code",[_._v('<form action="http://foo.com">')])]),_._v(" "),t("p",[_._v("使用相对URL——数据被发送到服务器上的不同URL")]),_._v(" "),t("p",[t("code",[_._v('<form action="/somewhere_else">')])]),_._v(" "),t("p",[_._v("在没有属性的情况下，像下面一样，<form>数据被发送到表单出现的相同页面上")]),_._v(" "),t("p",[t("code",[_._v("<form>")])]),_._v(" "),t("p",[_._v("许多较老的页面使用下面的符号表示数据应该被发送到包含表单的相同页面；这是必需的，因为直到HTML5action属性都需要该符号。现在，这不再需要了。")]),_._v(" "),t("p",[t("code",[_._v('<form action="#">')])]),_._v(" "),t("p",[_._v("注意：可以指定使用HTTPS(安全HTTP)协议的URL。当您这样做时，数据将与请求的其余部分一起加密，即使表单本身是托管在使用HTTP访问的不安全页面上。另一方面，如果表单是在安全页面上托管的，但是您指定了一个不安全的HTTP URL，它带有action属性，所有的浏览器都会在每次尝试发送数据时向用户显示一个安全警告，因为数据不会被加密。")]),_._v(" "),t("h4",{attrs:{id:"method属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#method属性","aria-hidden":"true"}},[_._v("#")]),_._v(" method属性")]),_._v(" "),t("p",[_._v("该属性定义了如何发送数据。HTTP协议提供了几种执行请求的方法；HTML表单数据可以通过许多不同的数据传输，其中最常见的是GET方法和POST方法。")]),_._v(" "),t("p",[_._v("为了理解这两种方法之间的区别，让我们回过头来看看HTTP是如何工作的。")]),_._v(" "),t("p",[_._v("每当您想要访问Web上的资源时，浏览器都会向URL发送一个请求。")]),_._v(" "),t("p",[_._v("HTTP请求由两个部分组成："),t("strong",[_._v("一个包含关于浏览器功能的全局元数据集的数据头，一个包含服务器处理特定请求所需信息的主体。")])]),_._v(" "),t("h5",{attrs:{id:"get-方法-get-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-方法-get-方法","aria-hidden":"true"}},[_._v("#")]),_._v(" GET 方法 {#GET_方法}")]),_._v(" "),t("p",[_._v("GET方法是浏览器使用的方法，请求服务器返回给定的资源:“嘿，服务器，我想要得到这个资源。在这种情况下，浏览器发送一个空的主体。因为主体是空的，如果使用该方法发送一个表单，那么发送到服务器的数据将被追加到URL。")]),_._v(" "),t("p",[t("code",[_._v('<form action="http://foo.com" method="get">')])]),_._v(" "),t("p",[t("code",[_._v("<div>")])]),_._v(" "),t("p",[t("code",[_._v('<label for="say">What greeting do you want to say?</label>')])]),_._v(" "),t("p",[t("code",[_._v('<input name="say" id="say" value="Hi">')])]),_._v(" "),t("p",[t("code",[_._v("</div>")])]),_._v(" "),t("p",[t("code",[_._v("<div>")])]),_._v(" "),t("p",[t("code",[_._v('<label for="to">Who do you want to say it to?</label>')])]),_._v(" "),t("p",[t("code",[_._v('<input name="to" id="to" value="Mom">')])]),_._v(" "),t("p",[t("code",[_._v("</div>")])]),_._v(" "),t("p",[t("code",[_._v("<div>")])]),_._v(" "),t("p",[t("code",[_._v("<button>Send my greetings</button>")])]),_._v(" "),t("p",[t("code",[_._v("</div>")])]),_._v(" "),t("p",[t("code",[_._v("</form>")])]),_._v(" "),t("p",[_._v("由于GET方法已经被使用，当你提交表单的时候，您将看到www.foo.com/?say=Hi&to=Mom在浏览器地址栏里。")]),_._v(" "),t("p",[_._v("数据被附加到URL作为一系列的名称/值对。在URL web地址结束之后，我们包括一个问号(?)，后面是名称/值对，每一个都由一个与符号(&)分隔开。在本例中，我们将两个数据传递给服务器。")]),_._v(" "),t("p",[_._v("say, 它有一个 Hi的值。")]),_._v(" "),t("p",[_._v("to, 它有一个 Mom的值。")]),_._v(" "),t("p",[_._v("HTTP请求如下：")]),_._v(" "),t("p",[t("code",[_._v("GET /?say=Hi&to=Mom HTTP/1.1")])]),_._v(" "),t("p",[t("code",[_._v("Host: foo.com")])]),_._v(" "),t("h5",{attrs:{id:"post-方法-post-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#post-方法-post-方法","aria-hidden":"true"}},[_._v("#")]),_._v(" POST 方法 {#POST_方法}")]),_._v(" "),t("p",[_._v("POST方法略有不同。这是浏览器在请求响应时使用的一种方法，它需要考虑到HTTP请求体中提供的数据:“嘿，服务器，看一下这些数据，然后给我回一个适当的结果。”如果使用该方法发送表单，则将数据追加到HTTP请求的主体中。")]),_._v(" "),t("p",[_._v("让我们来看一个例子，这是我们在上面的GET部分中所看到的相同的形式，但是使用method属性设置为post。")]),_._v(" "),t("p",[t("code",[_._v('<form action="http://foo.com" method="post">')])]),_._v(" "),t("p",[t("code",[_._v("<div>")])]),_._v(" "),t("p",[t("code",[_._v('<label for="say">What greeting do you want to say?</label>')])]),_._v(" "),t("p",[t("code",[_._v('<input name="say" id="say" value="Hi">')])]),_._v(" "),t("p",[t("code",[_._v("</div>")])]),_._v(" "),t("p",[t("code",[_._v("<div>")])]),_._v(" "),t("p",[t("code",[_._v('<label for="to">Who do you want to say it to?</label>')])]),_._v(" "),t("p",[t("code",[_._v('<input name="to" value="Mom">')])]),_._v(" "),t("p",[t("code",[_._v("</div>")])]),_._v(" "),t("p",[t("code",[_._v("<div>")])]),_._v(" "),t("p",[t("code",[_._v("<button>Send my greetings</button>")])]),_._v(" "),t("p",[t("code",[_._v("</div>")])]),_._v(" "),t("p",[t("code",[_._v("</form>")])]),_._v(" "),t("p",[_._v("当使用POST方法提交表单时，您将没有附加到URL的数据，HTTP请求看起来是这样的，而请求主体中包含的数据是这样的：")]),_._v(" "),t("p",[t("code",[_._v("POST / HTTP/1.1")])]),_._v(" "),t("p",[t("code",[_._v("Host: foo.com")])]),_._v(" "),t("p",[t("code",[_._v("Content-Type: application/x-www-form-urlencoded")])]),_._v(" "),t("p",[t("code",[_._v("Content-Length: 13")])]),_._v(" "),t("p",[t("code")]),_._v(" "),t("p",[t("code",[_._v("say=Hi&to=Mom")])]),_._v(" "),t("p",[_._v("Content-Length数据头表示主体的大小，Content-Type数据头表示发送到服务器的资源类型。")]),_._v(" "),t("h4",{attrs:{id:"查看http请求-查看http请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看http请求-查看http请求","aria-hidden":"true"}},[_._v("#")]),_._v(" 查看HTTP请求 {#查看HTTP请求}")]),_._v(" "),t("p",[_._v("HTTP请求永远不会显示给用户，您的表单数据将显示在Chrome网络选项卡中：")]),_._v(" "),t("ol",[t("li",[_._v("按下 F12")]),_._v(" "),t("li",[_._v('选择 "Network"')]),_._v(" "),t("li",[_._v('选择 "All"')]),_._v(" "),t("li",[_._v('在 "Name" 标签页选择 "foo.com"')]),_._v(" "),t("li",[_._v('选择 "Headers"')])]),_._v(" "),t("p",[_._v("唯一显示给用户的是被调用的URL，使用GET请求用户将在他们的URL栏中看到数据，但是使用POST请求用户将不会看到。这一点很重要，有两个原因：")]),_._v(" "),t("ul",[t("li",[_._v("如果您需要发送一个密码(或其他敏感数据)，永远不要使用GET方法否则数据会在URL栏中显示，这将非常不安全。")]),_._v(" "),t("li",[_._v("如果您需要发送大量的数据，那么POST方法是首选的，因为一些浏览器限制了URL的大小。此外，许多服务器限制它们接受的URL的长度。")])]),_._v(" "),t("h3",{attrs:{id:"在服务器端-检索数据-在服务器端检索数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在服务器端-检索数据-在服务器端检索数据","aria-hidden":"true"}},[_._v("#")]),_._v(" 在服务器端:检索数据 {#在服务器端检索数据}")]),_._v(" "),t("p",[_._v("无论选择哪种HTTP方法，服务器都会接收一个字符串并解析它以获取作为键/值对序列的数据。您访问这个序列的方式取决于您使用的开发平台以及您可能使用的任何特定框架。您使用的技术也决定了如何处理密钥副本；通常，最近收到的密钥的值是优先的。")]),_._v(" "),t("h4",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[_._v("#")])]),_._v(" "),t("p",[_._v("例如：原始PHP")]),_._v(" "),t("p",[_._v("PHP提供了一些全局对象来访问数据。假设您已经使用了POST方法，那么下面的示例将获取数据并将其显示给用户。当然，你对数据的处理取决于你自己。您可以显示它，将它存储到数据库中，通过电子邮件发送它，或者以其他方式处理它。")]),_._v(" "),t("p",[t("code",[_._v("<?php")])]),_._v(" "),t("p",[t("code",[_._v("// The global $_POST variable allows you to access the data sent with the POST method by name")])]),_._v(" "),t("p",[t("code",[_._v("// To access the data sent with the GET method, you can use $_GET")])]),_._v(" "),t("p",[t("code",[_._v("$say = htmlspecialchars($_POST['say']);")])]),_._v(" "),t("p",[t("code",[_._v("$to = htmlspecialchars($_POST['to']);")])]),_._v(" "),t("p",[t("code")]),_._v(" "),t("p",[t("code",[_._v("echo $say, ' ', $to;")])]),_._v(" "),t("p",[t("code",[_._v("?>")])]),_._v(" "),t("p",[_._v("这个例子显示了一个带有我们发送的数据的页面。该文件包含与我们之前看到的相同的示例表单，它使用了post的method和php-example.php的action。当提交时，它将表单数据发送到php-example.php，其中包含了上述代码块中所见的php代码。当执行此代码时，浏览器中的输出是Hi Mom。")]),_._v(" "),t("p",[_._v("注意：当您将本例加载到无法解释PHP代码的本地浏览器中时，这个示例将无法工作。因此当提交表单时，浏览器将为您提供下载PHP文件。为了让它生效，您需要通过某种类型的PHP服务器运行这个示例。本地PHP测试的好选择有MAMP(Mac和Windows)和MAMP(Mac、Windows、Linux)。")]),_._v(" "),t("h4",{attrs:{id:"例子：-python-例子：-python"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子：-python-例子：-python","aria-hidden":"true"}},[_._v("#")]),_._v(" 例子： Python {#例子：_Python}")]),_._v(" "),t("p",[_._v("这个例子展示了如何使用Python完成同样的事情——在web页面上显示提交的数据。")]),_._v(" "),t("p",[_._v("这将使用Flask framework来呈现模板、处理表单数据提交等")]),_._v(" "),t("p",[t("code",[_._v("from flask import Flask, render_template, request")])]),_._v(" "),t("p",[t("code",[_._v("app = Flask(__name__)")])]),_._v(" "),t("p",[t("code")]),_._v(" "),t("p",[t("code",[_._v("@app.route('/', methods=['GET', 'POST'])")])]),_._v(" "),t("p",[t("code",[_._v("def form():")])]),_._v(" "),t("p",[t("code",[_._v("return render_template('form.html')")])]),_._v(" "),t("p",[t("code")]),_._v(" "),t("p",[t("code",[_._v("@app.route('/hello', methods=['GET', 'POST'])")])]),_._v(" "),t("p",[t("code",[_._v("def hello():")])]),_._v(" "),t("p",[t("code",[_._v("return render_template('greeting.html', say=request.form['say'], to=request.form['to'])")])]),_._v(" "),t("p",[t("code")]),_._v(" "),t("p",[t("code",[_._v('if __name__ == "__main__":')])]),_._v(" "),t("p",[t("code",[_._v("app.run()")])]),_._v(" "),t("p",[_._v("以上代码中引用的两个模板如下：")]),_._v(" "),t("p",[_._v("greeting.html: 这个模板只包含一行，当它被呈现时，它会呈现给它的两个数据块。")]),_._v(" "),t("p",[_._v("这是通过前面所见的hello()函数完成的，该函数在/helloURL导航时运行。")]),_._v(" "),t("p",[_._v("注意：同样，如果您只是尝试将其直接加载到浏览器中，那么这段代码将无法工作。Python的工作方式与PHP略有不同——要在本地运行此代码，您需要安装Python/pip，然后使用pip3 install flask安装Flask。此时，您应该能够使用python3 python-example.py来运行这个示例，然后在浏览器中导航到localhost:5000。")]),_._v(" "),t("h4",{attrs:{id:"其他语言和框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他语言和框架","aria-hidden":"true"}},[_._v("#")]),_._v(" 其他语言和框架")]),_._v(" "),t("p",[_._v("还有许多其他的服务器端技术可以用于表单处理，包括Perl、Java、 .Net、Ruby等。只挑你最喜欢的用就好。话虽如此，但值得注意的是，直接使用这些技术并不常见，因为这可能很棘手。更常见的是使用许多优秀的框架，这些框架使处理表单变得更容易。")]),_._v(" "),t("p",[_._v("用于PHP的Symfony")]),_._v(" "),t("p",[_._v("用于Python的Django （比Flask要重一些，但是有更多的工具和选项。）")]),_._v(" "),t("p",[_._v("Node.js的Express")]),_._v(" "),t("p",[_._v("Ruby的Ruby On Rails")]),_._v(" "),t("p",[_._v("Java的Grails")]),_._v(" "),t("p",[_._v("要注意的是，即使使用这些框架，使用表单也不一定很容易。但这比从头开始编写所有功能要简单得多，而且会节省很多时间。")]),_._v(" "),t("h2",{attrs:{id:"特殊案例-发送文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊案例-发送文件","aria-hidden":"true"}},[_._v("#")]),_._v(" 特殊案例:发送文件")]),_._v(" "),t("p",[_._v("用HTML表单发送文件是一个特殊的例子。文件是二进制数据——或者被认为是这样的——而所有其他数据都是文本数据。由于HTTP是一种文本协议，所以处理二进制数据有特殊的要求。")]),_._v(" "),t("h3",{attrs:{id:"enctype-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enctype-属性","aria-hidden":"true"}},[_._v("#")]),_._v(" enctype 属性")]),_._v(" "),t("p",[_._v("该属性允许您指定在提交表单时所生成的请求中的Content-Type的HTTP数据头的值。这个数据头非常重要，因为它告诉服务器正在发送什么样的数据。默认情况下，它的值是application/x-www-form-urlencoded。它的意思是：“这是已编码为URL参数的表单数据。”")]),_._v(" "),t("p",[_._v("如果你想要发送文件，你需要额外的三个步骤：")]),_._v(" "),t("ul",[t("li",[_._v("将method属性设置为POST，因为文件内容不能放入URL参数中。")]),_._v(" "),t("li",[_._v("将enctype的值设置为multipart/form-data，因为数据将被分成多个部分，每个文件分别对应一个文件以及表单正文中包含的文本数据(如果文本也输入到表单中)。")]),_._v(" "),t("li",[_._v("包含一个或多个File picker小部件，允许用户选择将要上传的文件。")])]),_._v(" "),t("p",[t("code",[_._v('<form method="post" enctype="multipart/form-data">')])]),_._v(" "),t("p",[t("code",[_._v("<div>")])]),_._v(" "),t("p",[t("code",[_._v('<label for="file">Choose a file</label>')])]),_._v(" "),t("p",[t("code",[_._v('<input type="file" id="file" name="myFile">')])]),_._v(" "),t("p",[t("code",[_._v("</div>")])]),_._v(" "),t("p",[t("code",[_._v("<div>")])]),_._v(" "),t("p",[t("code",[_._v("<button>Send the file</button>")])]),_._v(" "),t("p",[t("code",[_._v("</div>")])]),_._v(" "),t("p",[t("code",[_._v("</form>")])]),_._v(" "),t("p",[_._v("注意：一些浏览器支持<input>的multiple属性，它允许选择一个以上的文件上传，但只使用一个 <input> 元素。服务器如何处理这些文件取决于服务器上使用的技术。如前所述，使用框架将使您的生活更轻松。")]),_._v(" "),t("p",[_._v("警告：为了防止滥用，许多服务器配置了文件和HTTP请求的大小限制。在发送文件之前，先检查服务器管理员的权限是很重要的。")]),_._v(" "),t("h2",{attrs:{id:"常见的安全问题-常见的安全问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的安全问题-常见的安全问题","aria-hidden":"true"}},[_._v("#")]),_._v(" 常见的安全问题 {#常见的安全问题}")]),_._v(" "),t("p",[_._v("每次向服务器发送数据时，都需要考虑安全性。到目前为止，HTML表单是最常见的攻击媒介(可能发生攻击的地方)。这些问题从来都不是来自HTML表单本身，它们来自于服务器如何处理数据。")]),_._v(" "),t("h3",{attrs:{id:"xss-和-csr-xss-和-csrf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xss-和-csr-xss-和-csrf","aria-hidden":"true"}},[_._v("#")]),_._v(" XSS 和 CSR {#XSS_和_CSRF}")]),_._v(" "),t("p",[_._v("跨站脚本(XSS)和跨站点请求伪造(CSRF)是常见的攻击类型，它们发生在当您将用户发送的数据显示给用户或另一个用户时。")]),_._v(" "),t("p",[_._v("XSS允许攻击者将客户端脚本注入到其他用户查看的Web页面中。攻击者可以使用跨站点脚本攻击的漏洞来绕过诸如同源策略之类的访问控制。这些攻击的影响可能从一个小麻烦到一个重大的安全风险。")]),_._v(" "),t("p",[_._v("CSRF攻击类似于XSS攻击，因为它们以相同的方式攻击——向Web页面中注入客户端脚本——但它们的目标是不同的。CSRF攻击者试图将特权升级到特权用户(比如站点管理员)的权限，以执行他们不应该执行的操作(例如，将数据发送给一个不受信任的用户)。")]),_._v(" "),t("p",[_._v("XSS攻击利用用户对web站点的信任，而CSRF攻击则利用网站为其用户提供的信任。")]),_._v(" "),t("p",[_._v("为了防止这些攻击，您应该始终检查用户发送给服务器的数据(如果需要显示)，尽量不要显示用户提供的HTML内容。相反，您应该处理用户提供的数据，这样您就不会逐字地显示它。当今市场上几乎所有的框架都实现了一个最小的过滤器，它可以从任何用户发送的数据中删除HTML<script>、<iframe> 和<object> 元素。这有助于降低风险，但并不一定会消除风险。")]),_._v(" "),t("h3",{attrs:{id:"sql注入-sql注入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql注入-sql注入","aria-hidden":"true"}},[_._v("#")]),_._v(" SQL注入 {#SQL注入}")]),_._v(" "),t("p",[_._v("SQL 注入是一种试图在目标web站点使用的数据库上执行操作的攻击类型。这通常包括发送一个SQL请求，希望服务器能够执行它（通常，当应用服务器试图存储由用户发送的数据时）。这实际上是攻击网站的主要途径之一。")]),_._v(" "),t("p",[_._v("其后果可能是可怕的，从数据丢失到通过使用特权升级控制整个网站基础设施的攻击。这是一个非常严重的威胁，您永远不应该存储用户发送的数据，而不执行一些清理工作(例如，在php/mysql基础设施上使用mysql_real_escape_string()。")]),_._v(" "),t("h3",{attrs:{id:"http数据头注入和电子邮件注入-http数据头注入和电子邮件注入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http数据头注入和电子邮件注入-http数据头注入和电子邮件注入","aria-hidden":"true"}},[_._v("#")]),_._v(" HTTP数据头注入和电子邮件注入 {#HTTP数据头注入和电子邮件注入}")]),_._v(" "),t("p",[_._v("当您的应用程序基于表单上用户的数据输入构建HTTP头部或电子邮件时，就会出现这种类型的攻击。这些不会直接损害您的服务器或影响您的用户，但是它们是一个更深入的问题，例如会话劫持或网络钓鱼攻击。")]),_._v(" "),t("p",[_._v("这些攻击大多是无声的，并且可以将您的服务器变成僵尸。")]),_._v(" "),t("h3",{attrs:{id:"偏执-永远不要相信你的用户-偏执永远不要相信你的用户"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#偏执-永远不要相信你的用户-偏执永远不要相信你的用户","aria-hidden":"true"}},[_._v("#")]),_._v(" 偏执:永远不要相信你的用户 {#偏执永远不要相信你的用户}")]),_._v(" "),t("p",[_._v("那么，你如何应对这些威胁呢?这是一个远远超出本指南的主题，但是有一些规则需要牢记。最重要的原则是:永远不要相信你的用户，包括你自己；即使是一个值得信赖的用户也可能被劫持。")]),_._v(" "),t("p",[_._v("所有到达服务器的数据都必须经过检查和消毒。总是这样。没有例外。")]),_._v(" "),t("ul",[t("li",[_._v("有潜在危险的字符转义。应该如何谨慎使用的特定字符取决于所使用的数据的上下文和所使用的服务器平台，但是所有的服务器端语言都有相应的功能。")]),_._v(" "),t("li",[_._v("限制输入的数据量，只允许有必要的数据。")]),_._v(" "),t("li",[_._v("沙箱上传文件(将它们存储在不同的服务器上，只允许通过不同的子域访问文件，或者通过完全不同的域名访问文件更好)。")])]),_._v(" "),t("p",[_._v("如果你遵循这三条规则，你应该避免很多问题，但是如果你想要得到一个有能力的第三方执行的安全检查，这是一个好主意。不要以为你已经看到了所有可能的问题。")])])}],!1,null,null,null);v.default=a.exports}}]);